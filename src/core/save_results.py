import os
import re
import subprocess
import time

def save_results(job_title, job_company, resume, user_assessment):
    """
    Creates the output/job directory to store results.
    Saves the .tex file in said location, then compiles it as a PDF.
    :param job_title: (str), title of the job
    :param job_company: (str), company name
    :param resume: (str), .tex contents generated by the LLM
    :param user_assessment: (dir[str, str]), results of the user assessment from assess_profile()
    """
    directory_name = (job_title + job_company).lower()
    directory_name = directory_name.replace(" ", "_")
    directory_name = re.sub(r'[^a-z0-9_\-]', '', directory_name)
    # Replaces any "unsaveable" characters

    os.makedirs("../../output/" + directory_name, exist_ok=False)

    with open("../../output/" + directory_name + '/main.tex', "w", encoding='utf-8') as file:
        file.write(resume)

    print(f"File created at ../../output/" + directory_name + '/main.tex')
    time.sleep(10)
    print(f"Compiling latex...")
    file = compile_latex_system('main.tex', "../../output/" + directory_name)
    cleanup_latex_files("../../output/" + directory_name)

    output_user_assessment(user_assessment, "../../output/" + directory_name)


    return


def compile_latex_system(latex_file, latex_directory):
    """
    Compiles the main.tex file into a PDF.
    :param latex_file: (str), name of the latex file including extension
    :param latex_directory: (str), directory of the latex file
    :return: (str) directory of the compiled pdf
    """
    if os.path.exists(os.path.join(latex_directory, latex_file)):
        if os.name == 'nt':  # windows
            null_device = 'NUL'
        else:  # unix-like
            null_device = '/dev/null'

        command = f"cd \"{latex_directory}\" && pdflatex -interaction=nonstopmode \"{latex_file}\" > {null_device} 2>&1"
        return_code = os.system(command)

        if return_code == 0:
            print(f"Successfully compiled '{latex_file}' in '{latex_directory}'")
        else:
            print(f"Error compiling '{latex_file}' in '{latex_directory}' (return code: {return_code})")
    else:
        print(f"Error: LaTeX file '{latex_file}' not found in '{latex_directory}'.")

def cleanup_latex_files(directory):
    """
    Deletes main.aux and main.log files in the specified directory.
    :param directory: (str), location of the files to be removed.
    :return:
    """
    aux_file = os.path.join(directory, 'main.aux')
    log_file = os.path.join(directory, 'main.log')

    deleted_count = 0

    for f in [aux_file, log_file]:
        if os.path.exists(f):
            try:
                os.remove(f)
                # print(f"Deleted: {f}")
                deleted_count += 1
            except OSError as e:
                print(f"Error deleting {f}: {e}")

    if deleted_count > 0:
        print(f"Successfully deleted {deleted_count} auxiliary files in '{directory}'.")
    else:
        print(f"No main.aux or main.log found in '{directory}'.")

def output_user_assessment(data_dict, filepath):
    """
    Saves the user's assessment into a .txt file
    :param data_dict: (dict[str, str]), user assessment results
    :param filepath: (str), location the file will be written in
    :return:
    """
    try:
        with open(filepath + '/comments.txt', 'w', encoding='utf-8') as f:
            for key, value in data_dict.items():
                f.write(f"{key}: {value}\n")
        print(f"Dictionary data successfully written to '{filepath}'.")
    except Exception as e:
        print(f"An error occurred while writing to '{filepath}': {e}")



if __name__ == "__main__":
    resume = r"""
    \documentclass{article}
    \begin{document}
    Hello, MiKTeX!
    \end{document}
    """
    comments = {'profile_fit': 'strong',
                'education_requirements_met': 'strong',
                'knowledge_requirements_met': 'strong',
                'years_of_experience_met': 'strong',
                'summary': 'good good very good job indeed you will get a job strong ant'}


    save_results("job_posting", "ashitionyx", resume, user_assessment=comments)